// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/server.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CandidateTrackerGoClient is the client API for CandidateTrackerGo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CandidateTrackerGoClient interface {
	CheckConnection(ctx context.Context, in *CheckConnectionRequest, opts ...grpc.CallOption) (*CheckConnectionResponse, error)
	GetUnprocessedFileUploadsCount(ctx context.Context, in *GetUnprocessedFileUploadsCountRequest, opts ...grpc.CallOption) (*GetUnprocessedFileUploadsCountResponse, error)
	GetFileUpload(ctx context.Context, in *GetFileUploadRequest, opts ...grpc.CallOption) (*GetFileUploadResponse, error)
	GetFileUploads(ctx context.Context, in *GetFileUploadsRequest, opts ...grpc.CallOption) (*GetFileUploadsResponse, error)
	UploadFiles(ctx context.Context, in *UploadFilesRequest, opts ...grpc.CallOption) (*UploadFilesResponse, error)
	CompleteFileUploads(ctx context.Context, in *CompleteFileUploadsRequest, opts ...grpc.CallOption) (*CompleteFileUploadsResponse, error)
	DeleteFileUpload(ctx context.Context, in *DeleteFileUploadRequest, opts ...grpc.CallOption) (*DeleteFileUploadResponse, error)
	GetCandidates(ctx context.Context, in *GetCandidatesRequest, opts ...grpc.CallOption) (*GetCandidatesResponse, error)
	GetCandidate(ctx context.Context, in *GetCandidateRequest, opts ...grpc.CallOption) (*GetCandidateResponse, error)
	UpdateCandidate(ctx context.Context, in *UpdateCandidateRequest, opts ...grpc.CallOption) (*UpdateCandidateResponse, error)
}

type candidateTrackerGoClient struct {
	cc grpc.ClientConnInterface
}

func NewCandidateTrackerGoClient(cc grpc.ClientConnInterface) CandidateTrackerGoClient {
	return &candidateTrackerGoClient{cc}
}

func (c *candidateTrackerGoClient) CheckConnection(ctx context.Context, in *CheckConnectionRequest, opts ...grpc.CallOption) (*CheckConnectionResponse, error) {
	out := new(CheckConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.CandidateTrackerGo/CheckConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateTrackerGoClient) GetUnprocessedFileUploadsCount(ctx context.Context, in *GetUnprocessedFileUploadsCountRequest, opts ...grpc.CallOption) (*GetUnprocessedFileUploadsCountResponse, error) {
	out := new(GetUnprocessedFileUploadsCountResponse)
	err := c.cc.Invoke(ctx, "/protos.CandidateTrackerGo/GetUnprocessedFileUploadsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateTrackerGoClient) GetFileUpload(ctx context.Context, in *GetFileUploadRequest, opts ...grpc.CallOption) (*GetFileUploadResponse, error) {
	out := new(GetFileUploadResponse)
	err := c.cc.Invoke(ctx, "/protos.CandidateTrackerGo/GetFileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateTrackerGoClient) GetFileUploads(ctx context.Context, in *GetFileUploadsRequest, opts ...grpc.CallOption) (*GetFileUploadsResponse, error) {
	out := new(GetFileUploadsResponse)
	err := c.cc.Invoke(ctx, "/protos.CandidateTrackerGo/GetFileUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateTrackerGoClient) UploadFiles(ctx context.Context, in *UploadFilesRequest, opts ...grpc.CallOption) (*UploadFilesResponse, error) {
	out := new(UploadFilesResponse)
	err := c.cc.Invoke(ctx, "/protos.CandidateTrackerGo/UploadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateTrackerGoClient) CompleteFileUploads(ctx context.Context, in *CompleteFileUploadsRequest, opts ...grpc.CallOption) (*CompleteFileUploadsResponse, error) {
	out := new(CompleteFileUploadsResponse)
	err := c.cc.Invoke(ctx, "/protos.CandidateTrackerGo/CompleteFileUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateTrackerGoClient) DeleteFileUpload(ctx context.Context, in *DeleteFileUploadRequest, opts ...grpc.CallOption) (*DeleteFileUploadResponse, error) {
	out := new(DeleteFileUploadResponse)
	err := c.cc.Invoke(ctx, "/protos.CandidateTrackerGo/DeleteFileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateTrackerGoClient) GetCandidates(ctx context.Context, in *GetCandidatesRequest, opts ...grpc.CallOption) (*GetCandidatesResponse, error) {
	out := new(GetCandidatesResponse)
	err := c.cc.Invoke(ctx, "/protos.CandidateTrackerGo/GetCandidates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateTrackerGoClient) GetCandidate(ctx context.Context, in *GetCandidateRequest, opts ...grpc.CallOption) (*GetCandidateResponse, error) {
	out := new(GetCandidateResponse)
	err := c.cc.Invoke(ctx, "/protos.CandidateTrackerGo/GetCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateTrackerGoClient) UpdateCandidate(ctx context.Context, in *UpdateCandidateRequest, opts ...grpc.CallOption) (*UpdateCandidateResponse, error) {
	out := new(UpdateCandidateResponse)
	err := c.cc.Invoke(ctx, "/protos.CandidateTrackerGo/UpdateCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CandidateTrackerGoServer is the server API for CandidateTrackerGo service.
// All implementations must embed UnimplementedCandidateTrackerGoServer
// for forward compatibility
type CandidateTrackerGoServer interface {
	CheckConnection(context.Context, *CheckConnectionRequest) (*CheckConnectionResponse, error)
	GetUnprocessedFileUploadsCount(context.Context, *GetUnprocessedFileUploadsCountRequest) (*GetUnprocessedFileUploadsCountResponse, error)
	GetFileUpload(context.Context, *GetFileUploadRequest) (*GetFileUploadResponse, error)
	GetFileUploads(context.Context, *GetFileUploadsRequest) (*GetFileUploadsResponse, error)
	UploadFiles(context.Context, *UploadFilesRequest) (*UploadFilesResponse, error)
	CompleteFileUploads(context.Context, *CompleteFileUploadsRequest) (*CompleteFileUploadsResponse, error)
	DeleteFileUpload(context.Context, *DeleteFileUploadRequest) (*DeleteFileUploadResponse, error)
	GetCandidates(context.Context, *GetCandidatesRequest) (*GetCandidatesResponse, error)
	GetCandidate(context.Context, *GetCandidateRequest) (*GetCandidateResponse, error)
	UpdateCandidate(context.Context, *UpdateCandidateRequest) (*UpdateCandidateResponse, error)
	mustEmbedUnimplementedCandidateTrackerGoServer()
}

// UnimplementedCandidateTrackerGoServer must be embedded to have forward compatible implementations.
type UnimplementedCandidateTrackerGoServer struct {
}

func (UnimplementedCandidateTrackerGoServer) CheckConnection(context.Context, *CheckConnectionRequest) (*CheckConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConnection not implemented")
}
func (UnimplementedCandidateTrackerGoServer) GetUnprocessedFileUploadsCount(context.Context, *GetUnprocessedFileUploadsCountRequest) (*GetUnprocessedFileUploadsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnprocessedFileUploadsCount not implemented")
}
func (UnimplementedCandidateTrackerGoServer) GetFileUpload(context.Context, *GetFileUploadRequest) (*GetFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileUpload not implemented")
}
func (UnimplementedCandidateTrackerGoServer) GetFileUploads(context.Context, *GetFileUploadsRequest) (*GetFileUploadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileUploads not implemented")
}
func (UnimplementedCandidateTrackerGoServer) UploadFiles(context.Context, *UploadFilesRequest) (*UploadFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFiles not implemented")
}
func (UnimplementedCandidateTrackerGoServer) CompleteFileUploads(context.Context, *CompleteFileUploadsRequest) (*CompleteFileUploadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteFileUploads not implemented")
}
func (UnimplementedCandidateTrackerGoServer) DeleteFileUpload(context.Context, *DeleteFileUploadRequest) (*DeleteFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileUpload not implemented")
}
func (UnimplementedCandidateTrackerGoServer) GetCandidates(context.Context, *GetCandidatesRequest) (*GetCandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandidates not implemented")
}
func (UnimplementedCandidateTrackerGoServer) GetCandidate(context.Context, *GetCandidateRequest) (*GetCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandidate not implemented")
}
func (UnimplementedCandidateTrackerGoServer) UpdateCandidate(context.Context, *UpdateCandidateRequest) (*UpdateCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCandidate not implemented")
}
func (UnimplementedCandidateTrackerGoServer) mustEmbedUnimplementedCandidateTrackerGoServer() {}

// UnsafeCandidateTrackerGoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CandidateTrackerGoServer will
// result in compilation errors.
type UnsafeCandidateTrackerGoServer interface {
	mustEmbedUnimplementedCandidateTrackerGoServer()
}

func RegisterCandidateTrackerGoServer(s grpc.ServiceRegistrar, srv CandidateTrackerGoServer) {
	s.RegisterService(&CandidateTrackerGo_ServiceDesc, srv)
}

func _CandidateTrackerGo_CheckConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateTrackerGoServer).CheckConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CandidateTrackerGo/CheckConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateTrackerGoServer).CheckConnection(ctx, req.(*CheckConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateTrackerGo_GetUnprocessedFileUploadsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnprocessedFileUploadsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateTrackerGoServer).GetUnprocessedFileUploadsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CandidateTrackerGo/GetUnprocessedFileUploadsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateTrackerGoServer).GetUnprocessedFileUploadsCount(ctx, req.(*GetUnprocessedFileUploadsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateTrackerGo_GetFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateTrackerGoServer).GetFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CandidateTrackerGo/GetFileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateTrackerGoServer).GetFileUpload(ctx, req.(*GetFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateTrackerGo_GetFileUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateTrackerGoServer).GetFileUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CandidateTrackerGo/GetFileUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateTrackerGoServer).GetFileUploads(ctx, req.(*GetFileUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateTrackerGo_UploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateTrackerGoServer).UploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CandidateTrackerGo/UploadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateTrackerGoServer).UploadFiles(ctx, req.(*UploadFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateTrackerGo_CompleteFileUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteFileUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateTrackerGoServer).CompleteFileUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CandidateTrackerGo/CompleteFileUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateTrackerGoServer).CompleteFileUploads(ctx, req.(*CompleteFileUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateTrackerGo_DeleteFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateTrackerGoServer).DeleteFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CandidateTrackerGo/DeleteFileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateTrackerGoServer).DeleteFileUpload(ctx, req.(*DeleteFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateTrackerGo_GetCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateTrackerGoServer).GetCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CandidateTrackerGo/GetCandidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateTrackerGoServer).GetCandidates(ctx, req.(*GetCandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateTrackerGo_GetCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateTrackerGoServer).GetCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CandidateTrackerGo/GetCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateTrackerGoServer).GetCandidate(ctx, req.(*GetCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateTrackerGo_UpdateCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateTrackerGoServer).UpdateCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CandidateTrackerGo/UpdateCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateTrackerGoServer).UpdateCandidate(ctx, req.(*UpdateCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CandidateTrackerGo_ServiceDesc is the grpc.ServiceDesc for CandidateTrackerGo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CandidateTrackerGo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.CandidateTrackerGo",
	HandlerType: (*CandidateTrackerGoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckConnection",
			Handler:    _CandidateTrackerGo_CheckConnection_Handler,
		},
		{
			MethodName: "GetUnprocessedFileUploadsCount",
			Handler:    _CandidateTrackerGo_GetUnprocessedFileUploadsCount_Handler,
		},
		{
			MethodName: "GetFileUpload",
			Handler:    _CandidateTrackerGo_GetFileUpload_Handler,
		},
		{
			MethodName: "GetFileUploads",
			Handler:    _CandidateTrackerGo_GetFileUploads_Handler,
		},
		{
			MethodName: "UploadFiles",
			Handler:    _CandidateTrackerGo_UploadFiles_Handler,
		},
		{
			MethodName: "CompleteFileUploads",
			Handler:    _CandidateTrackerGo_CompleteFileUploads_Handler,
		},
		{
			MethodName: "DeleteFileUpload",
			Handler:    _CandidateTrackerGo_DeleteFileUpload_Handler,
		},
		{
			MethodName: "GetCandidates",
			Handler:    _CandidateTrackerGo_GetCandidates_Handler,
		},
		{
			MethodName: "GetCandidate",
			Handler:    _CandidateTrackerGo_GetCandidate_Handler,
		},
		{
			MethodName: "UpdateCandidate",
			Handler:    _CandidateTrackerGo_UpdateCandidate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/server.proto",
}
