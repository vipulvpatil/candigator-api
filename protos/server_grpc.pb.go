// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/server.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CandidateTrackerGoClient is the client API for CandidateTrackerGo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CandidateTrackerGoClient interface {
	CheckConnection(ctx context.Context, in *CheckConnectionRequest, opts ...grpc.CallOption) (*CheckConnectionResponse, error)
	UploadFiles(ctx context.Context, in *UploadFilesRequest, opts ...grpc.CallOption) (*UploadFilesResponse, error)
	CompleteFileUploads(ctx context.Context, in *CompleteFileUploadsRequest, opts ...grpc.CallOption) (*CompleteFileUploadsResponse, error)
}

type candidateTrackerGoClient struct {
	cc grpc.ClientConnInterface
}

func NewCandidateTrackerGoClient(cc grpc.ClientConnInterface) CandidateTrackerGoClient {
	return &candidateTrackerGoClient{cc}
}

func (c *candidateTrackerGoClient) CheckConnection(ctx context.Context, in *CheckConnectionRequest, opts ...grpc.CallOption) (*CheckConnectionResponse, error) {
	out := new(CheckConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.CandidateTrackerGo/CheckConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateTrackerGoClient) UploadFiles(ctx context.Context, in *UploadFilesRequest, opts ...grpc.CallOption) (*UploadFilesResponse, error) {
	out := new(UploadFilesResponse)
	err := c.cc.Invoke(ctx, "/protos.CandidateTrackerGo/UploadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateTrackerGoClient) CompleteFileUploads(ctx context.Context, in *CompleteFileUploadsRequest, opts ...grpc.CallOption) (*CompleteFileUploadsResponse, error) {
	out := new(CompleteFileUploadsResponse)
	err := c.cc.Invoke(ctx, "/protos.CandidateTrackerGo/CompleteFileUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CandidateTrackerGoServer is the server API for CandidateTrackerGo service.
// All implementations must embed UnimplementedCandidateTrackerGoServer
// for forward compatibility
type CandidateTrackerGoServer interface {
	CheckConnection(context.Context, *CheckConnectionRequest) (*CheckConnectionResponse, error)
	UploadFiles(context.Context, *UploadFilesRequest) (*UploadFilesResponse, error)
	CompleteFileUploads(context.Context, *CompleteFileUploadsRequest) (*CompleteFileUploadsResponse, error)
	mustEmbedUnimplementedCandidateTrackerGoServer()
}

// UnimplementedCandidateTrackerGoServer must be embedded to have forward compatible implementations.
type UnimplementedCandidateTrackerGoServer struct {
}

func (UnimplementedCandidateTrackerGoServer) CheckConnection(context.Context, *CheckConnectionRequest) (*CheckConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConnection not implemented")
}
func (UnimplementedCandidateTrackerGoServer) UploadFiles(context.Context, *UploadFilesRequest) (*UploadFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFiles not implemented")
}
func (UnimplementedCandidateTrackerGoServer) CompleteFileUploads(context.Context, *CompleteFileUploadsRequest) (*CompleteFileUploadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteFileUploads not implemented")
}
func (UnimplementedCandidateTrackerGoServer) mustEmbedUnimplementedCandidateTrackerGoServer() {}

// UnsafeCandidateTrackerGoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CandidateTrackerGoServer will
// result in compilation errors.
type UnsafeCandidateTrackerGoServer interface {
	mustEmbedUnimplementedCandidateTrackerGoServer()
}

func RegisterCandidateTrackerGoServer(s grpc.ServiceRegistrar, srv CandidateTrackerGoServer) {
	s.RegisterService(&CandidateTrackerGo_ServiceDesc, srv)
}

func _CandidateTrackerGo_CheckConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateTrackerGoServer).CheckConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CandidateTrackerGo/CheckConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateTrackerGoServer).CheckConnection(ctx, req.(*CheckConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateTrackerGo_UploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateTrackerGoServer).UploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CandidateTrackerGo/UploadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateTrackerGoServer).UploadFiles(ctx, req.(*UploadFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateTrackerGo_CompleteFileUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteFileUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateTrackerGoServer).CompleteFileUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CandidateTrackerGo/CompleteFileUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateTrackerGoServer).CompleteFileUploads(ctx, req.(*CompleteFileUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CandidateTrackerGo_ServiceDesc is the grpc.ServiceDesc for CandidateTrackerGo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CandidateTrackerGo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.CandidateTrackerGo",
	HandlerType: (*CandidateTrackerGoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckConnection",
			Handler:    _CandidateTrackerGo_CheckConnection_Handler,
		},
		{
			MethodName: "UploadFiles",
			Handler:    _CandidateTrackerGo_UploadFiles_Handler,
		},
		{
			MethodName: "CompleteFileUploads",
			Handler:    _CandidateTrackerGo_CompleteFileUploads_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/server.proto",
}
